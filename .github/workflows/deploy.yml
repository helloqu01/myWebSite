name: Deploy to AWS

on:
  push:
    branches: [main]

jobs:
  deploy-web:
    name: "→ Frontend: Next.js → S3 + CloudFront"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install dependencies (web)
        working-directory: front
        run: npm ci

      - name: Build (web)
        working-directory: front
        run: npm run build

      - name: Sync to S3
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
        run: aws s3 sync front/out/ s3://$BUCKET --delete

      - name: Invalidate CloudFront
        env:
          DISTRIBUTION_ID: ${{ secrets.CF_DISTRIBUTION_ID }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"

  deploy-api:
    name: "→ Backend: NestJS → Lambda (SAM)"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install dependencies (api)
        working-directory: back
        run: npm ci

      - name: Build (api)
        working-directory: back
        run: npm run build

      - name: Build & Package with SAM
        working-directory: back
        run: |
          # 1) SAM build: 컴파일된 코드 + production deps 설치
          sam build --use-container

          # 2) SAM package: 아티팩트를 S3에 업로드하고 packaged.yaml 생성
          sam package \
            --template-file .aws-sam/build/template.yaml \
            --s3-bucket ${{ secrets.SAM_ARTIFACTS_BUCKET }} \
            --output-template-file packaged.yaml

      - name: Deploy with SAM
        working-directory: back
        run: |
          # 3) SAM deploy: packaged.yaml 로 스택 업데이트
          sam deploy \
            --template-file packaged.yaml \
            --stack-name ${{ secrets.STACK_NAME }} \
            --no-confirm-changeset \
            --capabilities CAPABILITY_IAM
